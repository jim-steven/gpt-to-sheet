{
  "x-openai-isConsequential": false,
  "x-openai-baseUrl": "https://gpt-to-sheet.onrender.com",
  "openapi": "3.1.0",
  "info": {
    "title": "GPT-to-Sheet API",
    "description": "API for logging various types of data to Google Sheets using service account authentication.",
    "version": "2.0.0",
    "contact": {
      "name": "API Support",
      "email": "support@example.com"
    }
  },
  "servers": [
    {
      "url": "https://gpt-to-sheet.onrender.com",
      "description": "Production server"
    }
  ],
  "tags": [
    {
      "name": "transactions",
      "description": "Transaction management endpoints"
    },
    {
      "name": "workouts",
      "description": "Workout logging endpoints"
    },
    {
      "name": "food",
      "description": "Food logging endpoints"
    },
    {
      "name": "journal",
      "description": "Journal entry endpoints"
    },
    {
      "name": "status",
      "description": "Status update endpoints"
    },
    {
      "name": "sheets",
      "description": "Google Sheets operations"
    },
    {
      "name": "chat",
      "description": "Chat logging endpoints"
    }
  ],
  "paths": {
    "/api/log-transactions": {
      "post": {
        "tags": ["transactions"],
        "summary": "Log transaction to Google Sheets",
        "description": "Logs single or bulk transactions to a specified Google Sheet using service account authentication.",
        "operationId": "logTransactions",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["data"],
                "properties": {
                  "spreadsheetId": {
                    "type": "string",
                    "description": "The ID of the Google Sheet to write to (optional, defaults to configured sheet)"
                  },
                  "sheetName": {
                    "type": "string",
                    "description": "The name of the sheet within the spreadsheet (optional, defaults to 'Transactions')"
                  },
                  "data": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/TransactionData"
                      },
                      {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/TransactionData"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully logged the transaction(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing required parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Failed to write to sheet",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/log-workouts": {
      "post": {
        "tags": ["workouts"],
        "summary": "Log workout to Google Sheets",
        "description": "Logs single or bulk workouts to a specified Google Sheet using service account authentication.",
        "operationId": "logWorkouts",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["data"],
                "properties": {
                  "spreadsheetId": {
                    "type": "string",
                    "description": "The ID of the Google Sheet to write to (optional, defaults to configured sheet)"
                  },
                  "sheetName": {
                    "type": "string",
                    "description": "The name of the sheet within the spreadsheet (optional, defaults to 'Workouts')"
                  },
                  "data": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/WorkoutData"
                      },
                      {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/WorkoutData"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully logged the workout(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing required parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Failed to write to sheet",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/log-food": {
      "post": {
        "tags": ["food"],
        "summary": "Log food to Google Sheets",
        "description": "Logs single or bulk food entries to a specified Google Sheet using service account authentication.",
        "operationId": "logFood",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["data"],
                "properties": {
                  "spreadsheetId": {
                    "type": "string",
                    "description": "The ID of the Google Sheet to write to (optional, defaults to configured sheet)"
                  },
                  "sheetName": {
                    "type": "string",
                    "description": "The name of the sheet within the spreadsheet (optional, defaults to 'Meals')"
                  },
                  "data": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/FoodData"
                      },
                      {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/FoodData"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully logged the food entry(ies)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing required parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Failed to write to sheet",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/log-journal": {
      "post": {
        "tags": ["journal"],
        "summary": "Log journal entry to Google Sheets",
        "description": "Logs single or bulk journal entries to a specified Google Sheet using service account authentication.",
        "operationId": "logJournal",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["data"],
                "properties": {
                  "spreadsheetId": {
                    "type": "string",
                    "description": "The ID of the Google Sheet to write to (optional, defaults to configured sheet)"
                  },
                  "sheetName": {
                    "type": "string",
                    "description": "The name of the sheet within the spreadsheet (optional, defaults to 'Entries')"
                  },
                  "data": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/JournalData"
                      },
                      {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/JournalData"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully logged the journal entry(ies)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing required parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Failed to write to sheet",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/log-status": {
      "post": {
        "tags": ["status"],
        "summary": "Log status update to Google Sheets",
        "description": "Logs single or bulk status updates to a specified Google Sheet using service account authentication.",
        "operationId": "logStatus",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["data"],
                "properties": {
                  "spreadsheetId": {
                    "type": "string",
                    "description": "The ID of the Google Sheet to write to (optional, defaults to configured sheet)"
                  },
                  "sheetName": {
                    "type": "string",
                    "description": "The name of the sheet within the spreadsheet (optional, defaults to 'Status')"
                  },
                  "data": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/StatusData"
                      },
                      {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/StatusData"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully logged the status update(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing required parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Failed to write to sheet",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/get-sheet-data": {
      "post": {
        "tags": ["sheets"],
        "summary": "Get data from Google Sheets",
        "description": "Retrieves data from a specified Google Sheet using service account authentication.",
        "operationId": "getSheetData",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "spreadsheetId": {
                    "type": "string",
                    "description": "The ID of the Google Sheet to read from (optional, defaults to configured sheet)"
                  },
                  "sheetName": {
                    "type": "string",
                    "description": "The name of the sheet within the spreadsheet (optional, defaults to 'Transactions')"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved sheet data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing required parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Failed to read from sheet",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/service-account": {
      "get": {
        "tags": ["sheets"],
        "summary": "Get service account email",
        "description": "Returns the email address of the service account being used.",
        "operationId": "getServiceAccount",
        "responses": {
          "200": {
            "description": "Successfully retrieved service account email",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "serviceAccount": {
                      "type": "string",
                      "description": "Service account email address"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Failed to get service account email",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/log-chat-backup": {
      "post": {
        "tags": ["chat"],
        "summary": "Log chat messages to Google Sheets",
        "description": "Logs single or bulk chat messages to a specified Google Sheet using service account authentication.",
        "operationId": "logChatBackup",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["data"],
                "properties": {
                  "spreadsheetId": {
                    "type": "string",
                    "description": "The ID of the Google Sheet to write to (optional, defaults to configured sheet)"
                  },
                  "sheetName": {
                    "type": "string",
                    "description": "The name of the sheet within the spreadsheet (optional, defaults to 'Chat')"
                  },
                  "data": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/ChatData"
                      },
                      {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/ChatData"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully logged the chat message(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing required parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Failed to write to sheet",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "TransactionData": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "description": "Transaction date (YYYY-MM-DD)",
            "format": "date"
          },
          "time": {
            "type": "string",
            "description": "Transaction time (HH:mm:ss)",
            "format": "time"
          },
          "accountName": {
            "type": "string",
            "description": "Account name"
          },
          "transactionType": {
            "type": "string",
            "description": "Type of transaction"
          },
          "category": {
            "type": "string",
            "description": "Transaction category"
          },
          "allowances": {
            "type": "string",
            "description": "Allowances"
          },
          "deductions": {
            "type": "string",
            "description": "Deductions"
          },
          "items": {
            "type": "string",
            "description": "Items purchased"
          },
          "establishment": {
            "type": "string",
            "description": "Establishment name"
          },
          "receiptNumber": {
            "type": "string",
            "description": "Receipt number"
          },
          "amount": {
            "type": "number",
            "description": "Transaction amount",
            "format": "float"
          },
          "paymentMethod": {
            "type": "string",
            "description": "Method of payment"
          },
          "cardUsed": {
            "type": "string",
            "description": "Card used for payment"
          },
          "linkedBudgetCategory": {
            "type": "string",
            "description": "Linked budget category"
          },
          "onlineTransactionId": {
            "type": "string",
            "description": "Online transaction ID"
          },
          "mappedOnlineVendor": {
            "type": "string",
            "description": "Mapped online vendor"
          },
          "reimbursable": {
            "type": "string",
            "description": "Whether transaction is reimbursable"
          },
          "reimbursementStatus": {
            "type": "string",
            "description": "Status of reimbursement"
          },
          "interestType": {
            "type": "string",
            "description": "Type of interest"
          },
          "taxWithheld": {
            "type": "number",
            "description": "Tax withheld amount",
            "format": "float"
          },
          "taxDeductible": {
            "type": "string",
            "description": "Whether transaction is tax deductible"
          },
          "taxCategory": {
            "type": "string",
            "description": "Tax category"
          },
          "bankIdentifier": {
            "type": "string",
            "description": "Bank identifier"
          },
          "transactionMethod": {
            "type": "string",
            "description": "Method of transaction"
          },
          "transferMethod": {
            "type": "string",
            "description": "Method of transfer"
          },
          "referenceId": {
            "type": "string",
            "description": "Reference ID"
          },
          "notes": {
            "type": "string",
            "description": "Additional notes"
          },
          "processed": {
            "type": "string",
            "description": "Processing status"
          }
        }
      },
      "WorkoutData": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "description": "Workout date (YYYY-MM-DD)",
            "format": "date"
          },
          "workoutType": {
            "type": "string",
            "description": "Type of workout (Push, Pull, Legs, Core, Mobility, Rest, etc.)"
          },
          "exercises": {
            "type": "string",
            "description": "List of exercises done"
          },
          "sets": {
            "type": "string",
            "description": "Number of sets (e.g. 3x)"
          },
          "reps": {
            "type": "string",
            "description": "Number of reps (e.g. 8-12 or actual reps)"
          },
          "progression": {
            "type": "string",
            "description": "Progression notes (e.g. 'Struggled on last set', 'Moved to elevated push-ups')"
          },
          "duration": {
            "type": "string",
            "description": "Time / Duration (e.g. 45 min)"
          },
          "rpe": {
            "type": "string",
            "description": "Rate of Perceived Exertion (1-10 scale)"
          },
          "energy": {
            "type": "string",
            "description": "Energy / Mood (e.g. 'Tired', 'Felt strong')"
          },
          "nextFocus": {
            "type": "string",
            "description": "Next focus / adjustment (e.g. 'Add reps next time', 'Work on form')"
          }
        }
      },
      "FoodData": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "description": "Date (YYYY-MM-DD)",
            "format": "date"
          },
          "mealType": {
            "type": "string",
            "description": "Type of meal (Breakfast, Lunch, Dinner, Snack, Pre/Post-Workout)"
          },
          "timeEaten": {
            "type": "string",
            "description": "Time eaten (e.g. 8:30 AM)",
            "format": "time"
          },
          "description": {
            "type": "string",
            "description": "Food / Meal Description (e.g. Chicken rice bowl, banana, protein shake)"
          },
          "portion": {
            "type": "string",
            "description": "Portion / Serving Size (e.g. 1 cup, 100g)"
          },
          "calories": {
            "type": "string",
            "description": "Calories (if tracking intake)"
          },
          "macros": {
            "type": "string",
            "description": "Macros (Protein / Carbs / Fat)"
          },
          "mood": {
            "type": "string",
            "description": "Mood / Energy After Eating (e.g. 'Felt full', 'Still hungry', 'Bloated')"
          },
          "notes": {
            "type": "string",
            "description": "Additional notes (e.g. cravings, digestion, if you skipped or delayed a meal)"
          }
        }
      },
      "JournalData": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "description": "Date (YYYY-MM-DD)",
            "format": "date"
          },
          "whatHappened": {
            "type": "string",
            "description": "What happened?"
          },
          "whereGod": {
            "type": "string",
            "description": "Where did I see God?"
          },
          "teaching": {
            "type": "string",
            "description": "What is God teaching me?"
          },
          "response": {
            "type": "string",
            "description": "How can I respond in faith?"
          },
          "prayer": {
            "type": "string",
            "description": "Prayer / Conversation with God"
          },
          "scripture": {
            "type": "string",
            "description": "Scripture"
          },
          "gratitude": {
            "type": "string",
            "description": "Gratitude"
          }
        }
      },
      "StatusData": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "description": "Date (YYYY-MM-DD)",
            "format": "date"
          },
          "timeBlock": {
            "type": "string",
            "description": "Time / Time Block (e.g. 9:00 AM-10:00 AM)"
          },
          "activity": {
            "type": "string",
            "description": "Activity / Task (What you were doing)"
          },
          "category": {
            "type": "string",
            "description": "Category (Work, Rest, Social, Chores, Screen Time, Creative, Fitness, etc.)"
          },
          "location": {
            "type": "string",
            "description": "Location (Home, Gym, Café, Office, etc.)"
          },
          "mood": {
            "type": "string",
            "description": "Mood (Happy, Anxious, Focused, Tired, etc.)"
          },
          "energyLevel": {
            "type": "string",
            "description": "Energy Level (1-10)"
          },
          "focusLevel": {
            "type": "string",
            "description": "Focus Level (1-10)"
          },
          "notes": {
            "type": "string",
            "description": "Notes / Observations (Any thoughts, distractions, interruptions, etc.)"
          }
        }
      },
      "LogResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the operation was successful"
          },
          "message": {
            "type": "string",
            "description": "Success or error message"
          },
          "transactionId": {
            "type": "string",
            "description": "Generated transaction ID (format: TXN-XXXX)"
          },
          "receiptId": {
            "type": "string",
            "description": "Generated receipt ID (format: REC-XXXX) for bulk transactions"
          },
          "results": {
            "type": "object",
            "properties": {
              "methods": {
                "type": "object",
                "properties": {
                  "serviceAccount": {
                    "type": "boolean"
                  },
                  "oauth": {
                    "type": "boolean"
                  },
                  "queue": {
                    "type": "boolean"
                  }
                }
              },
              "primaryMethod": {
                "type": "string"
              },
              "success": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "GetDataResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "2D array of cell values with 29 columns",
            "items": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "minItems": 29,
              "maxItems": 29
            }
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "results": {
            "type": "object",
            "properties": {
              "methods": {
                "type": "object",
                "properties": {
                  "serviceAccount": {
                    "type": "boolean"
                  },
                  "oauth": {
                    "type": "boolean"
                  },
                  "queue": {
                    "type": "boolean"
                  }
                }
              },
              "primaryMethod": {
                "type": "string"
              },
              "success": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "ChatData": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "The chat message content"
          },
          "type": {
            "type": "string",
            "description": "Type of message (e.g., 'user_message', 'assistant_message', etc.)"
          },
          "source": {
            "type": "string",
            "description": "Source of the message (e.g., 'user', 'assistant', 'system')"
          },
          "timestamp": {
            "type": "string",
            "description": "Timestamp of the message (ISO format)",
            "format": "date-time"
          },
          "notes": {
            "type": "string",
            "description": "Additional notes or context"
          }
        },
        "required": ["message"]
      }
    }
  }
} 